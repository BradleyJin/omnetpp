#!/usr/bin/env python3

"""
This script can load .anf files and execute the chart scripts in them, independent of the IDE.
"""

import os
import sys
import glob
import argparse
from argparse import RawTextHelpFormatter
import traceback
import subprocess
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
from omnetpp.scave.impl_charttool import results, chart


_real_show = plt.show

def _fake_show(*args, **kwargs):
    global _show_called
    _real_show(*args, **kwargs)
    _show_called = True

plt.show = _fake_show


def error(message):
    print("ERROR: " + message)
    sys.exit(1)


class Chart:
    def __init__(self, index=int(), type=str(), name=str(), script=str(), properties=dict()):
        self.index = index
        self.type = type
        self.name = name
        self.script = script
        self.properties = properties

class Analysis:
    def __init__(self, inputs=list(), charts=list()):
        self.inputs = inputs
        self.charts = charts


def _make_chart(i, c):
    script = c.get('script') if 'script' in c.keys() else c.text

    sn = c.find('script')
    if sn is not None and sn.text is not None:
        script = sn.text.strip() # should get the CDATA contents instead, but shouldn't matter much
    else:
        script = ""

    props = { p.get('name') : p.get('value') for p in c.findall('property') }
    return Chart(i, c.get('type'), c.get('name'), script, props)


def load_anf_file(anf_file_name):
    analysis = ET.parse(anf_file_name).getroot()

    version = analysis.get('version')

    if version != "2":
        error("Unsupported analysis file version: \"{}\" (only \"2\" is supported).".format(version))

    inputs = [i.get('pattern') for i in analysis.findall("inputs/input")]
    charts = [_make_chart(i, c) for i, c in enumerate(analysis.findall("charts/chart"))]

    return Analysis(inputs, charts)

def get_opp_root():
    try:
        out = subprocess.check_output("opp_configfilepath")
    except:
        error("Could not determine OMNeT++ directory (try \". setenv\" in this shell).")
    return os.path.abspath(os.path.dirname(out.decode('utf-8')))

def print_analysis_info(anf_file, analysis):
    print('\nThe "{}" file contains {} charts:\n'.format(anf_file, len(analysis.charts)))
    for i, c in enumerate(analysis.charts):
        print('\t{}.\t"{}"\t({})'.format(i, c.name, c.type))

    print("\nAnd {} inputs:\n".format(len(analysis.inputs)))
    for i, inp in enumerate(analysis.inputs):
        print('\t"{}"'.format(inp))


def run_chart(wd, c, export):
    assert(os.path.isabs(wd))

    os.chdir(wd)
    sys.path = [wd,
        get_opp_root() + "/ui/org.omnetpp.scave.pychart/python/"
    ] + sys.path

    chart.name = c.name
    chart.chart_type = c.type
    chart.properties.clear()
    chart.properties.update(c.properties)

    global _show_called
    _show_called = False

    got_error = False
    try:
        exec(c.script, {})
    except:
        print("Error in chart " + c.name, file = sys.stderr)
        print(traceback.format_exc(), file = sys.stderr)
        got_error = True

    if export:
        # maybe warn if _show_called is set
        # TODO: heuristic: only prepend index if there would be collision (either among exported charts, or with existing files?)
        plt.savefig(str(c.index) + "-" + c.name + ".png")
    else:
        if not _show_called:
            plt.show()

    return not got_error


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=
        "Export images from OMNeT++ Analysis files (*.anf) and perform "
        "other tasks on them, without starting the IDE.\n"
        "This program can read and list the contents (input patterns and charts) "
        "of such files, and even execute the chart scripts.\n"
        "The native charts are 'emulated' using matplotlib.\n"
        "Use the -e flag to export all charts, or if specified, the selected chart, as image.\n"
        "NOTE: Exporting the charts this way does not (yet) take into account the exporting "
        "preferences configured in the IDE.", formatter_class=RawTextHelpFormatter)
    parser.add_argument('anf_file', type=str, nargs=1, help='The Analysis (.anf) file')
    parser.add_argument('-i', metavar='chart_index', type=int, nargs=1, help='The index of the chart to run (conflicts with -n)')
    parser.add_argument('-n', metavar='chart_name', type=str, nargs=1, help='The name of the chart to run (conflicts with -i, the first chart is selected when ambiguous)')
    parser.add_argument('-e', action='store_true', default=False, help='Export selected or all charts as image[s] (experimental)')
    parser.add_argument('-p', metavar='project_path', type=str, nargs='*', help='Adds a workspace path to filesystem directory mapping (format: "/project=.")')
    parser.add_argument('-w', metavar='workspace_directory', type=str, nargs=1, default='.', help='The workspace directory. Acts as a fallback after -p. The input patterns are relative to this')

    args = parser.parse_args()

    if args.i and args.n:
        error("Do not use -i and -n together.")

    anf_file = args.anf_file[0]
    anf_dir = os.path.dirname(os.path.abspath(anf_file))

    analysis = load_anf_file(anf_file)

    if False: # debug output
        import json
        print(json.dumps(analysis, default=lambda obj: vars(obj), indent=4, separators=(',', ': ')))


    project_paths = dict([tuple(p.split('=', 2)) for p in args.p]) if args.p else dict()

    # if there is no mapping given at all, guess that all projects are in .
    if not project_paths and analysis.inputs:
        projs = list()
        for inp in analysis.inputs:
            if inp.startswith("/"):
                inp = inp[1:]
            path = inp.split("/")[0]
            if not path in projs:
                projs.append(path)
        if projs:
            #TODO warn for multiple default project mappings
            for p in projs:
                project_paths[p] = "."

    inputfiles = list()
    for i in analysis.inputs:
        mapped = False
        for p in project_paths.keys():
            pv = project_paths[p]

            if not p.startswith("/"):
                p = "/" + p

            if i.startswith(p):
                inputfiles.extend(glob.glob(pv + "/" + i[len(p):]))
                mapped = True
                break

        # this is a sort-of default case
        if not mapped:
            inputfiles.extend(glob.glob(args.w[0] + "/" + i))

    # turning them into absolute paths (script will cwd) and making it unique
    inputfiles = list(set([os.path.abspath(item) for item in inputfiles]))

    results.inputfiles = inputfiles
    results.wd = args.w[0]

    selected_chart = None

    if args.i:
        selected_chart = analysis.charts[args.i[0]]
    elif args.n:
        for c in analysis.charts:
            if c.name == args.n[0]:
                selected_chart = c
                break
        if not selected_chart:
            error('No chart named "{}".'.format(args.n[0]))
    else: # neither -i nor -n given
        if not args.e:
            print_analysis_info(anf_file, analysis)

    ok = True

    if args.e:
        if selected_chart:
            chart_ok = run_chart(anf_dir, selected_chart, True)
            ok = ok and chart_ok
        else:
            for c in analysis.charts:
                chart_ok = run_chart(anf_dir, c, True)
                ok = ok and chart_ok
                plt.clf()
    else:
        if selected_chart:
            chart_ok = run_chart(anf_dir, selected_chart, False)
            ok = ok and chart_ok

    if not ok:
        sys.exit(1)
