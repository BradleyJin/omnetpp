#!/usr/bin/env python3

"""
This script can load .anf files and execute the chart scripts in them, independent of the IDE.
"""

import os
import sys
import glob
import argparse
from argparse import RawTextHelpFormatter
import traceback
import subprocess
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
from omnetpp.scave.analysis import *
from omnetpp.scave.impl_charttool import results, chart


def error(message):
    print("ERROR: " + message)
    sys.exit(1)

def run_chart_safe(analysis, chart, wd, workspace, extra_props=dict(), show=False):
    try:
        analysis.run_chart(chart, wd, workspace, extra_props, show)
    except Exception as e:
        print("Error in chart " + chart.name, file = sys.stderr)
        print(traceback.format_exc(), file = sys.stderr)
        return False
    return True

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description=
        "Export images from OMNeT++ Analysis files (*.anf) and perform "
        "other tasks on them, without starting the IDE.\n"
        "This program can read and list the contents (input patterns and charts) "
        "of such files, and even execute the chart scripts.\n"
        "The native charts are 'emulated' using matplotlib.\n"
        "Use the -e flag to export all charts, or if specified, the selected chart, as image.\n"
        "NOTE: Exporting the charts this way does not (yet) take into account the exporting "
        "preferences configured in the IDE.", formatter_class=RawTextHelpFormatter)
    parser.add_argument('anf_file', type=str, nargs=1, help='The Analysis (.anf) file')
    parser.add_argument('-i', metavar='chart_index', type=int, nargs=1, help='The index of the chart to run (conflicts with -n)')
    parser.add_argument('-n', metavar='chart_name', type=str, nargs=1, help='The name of the chart to run (conflicts with -i, the first chart is selected when ambiguous)')
    parser.add_argument('-e', action='store_true', default=False, help='Export selected or all charts as image[s]')
    parser.add_argument('-d', action='store_true', default=False, help='Export data of selected or all charts as CSV')
    parser.add_argument('-p', metavar='project_path', type=str, nargs='*', help='Adds a workspace path to filesystem directory mapping (format: "/project=.")')
    parser.add_argument('-w', metavar='workspace_directory', type=str, nargs=1, default='.', help='The workspace directory. Acts as a fallback after -p. The input patterns are relative to this')

    args = parser.parse_args()

    if args.i and args.n:
        error("Do not use -i and -n together.")

    anf_file = args.anf_file[0]
    anf_dir = os.path.dirname(os.path.abspath(anf_file))

    analysis = load_anf_file(anf_file)

    if False: # debug output
        import json
        print(json.dumps(analysis, default=lambda obj: vars(obj), indent=4, separators=(',', ': ')))


    project_paths = dict([tuple(p.split('=', 2)) for p in args.p]) if args.p else dict()

    # if there is no mapping given at all, guess that all projects are in .
    if not project_paths and analysis.inputs:
        projs = list()
        for inp in analysis.inputs:
            if inp.startswith("/"):
                inp = inp[1:]
            path = inp.split("/")[0]
            if not path in projs:
                projs.append(path)
        if projs:
            #TODO warn for multiple default project mappings
            for p in projs:
                project_paths[p] = "."

    workspace = Workspace(args.w[0], project_paths)

    selected_charts = None

    if args.i:
        selected_charts = [ analysis.charts[args.i[0]] ]
    elif args.n:
        for c in analysis.charts:
            if c.name == args.n[0]:
                selected_charts = [ c ]
                break
        if not selected_charts:
            error('No chart named "{}".'.format(args.n[0]))
    else: # neither -i nor -n given
        if not args.e and not args.d:
            print(anf_file + ":\n\n" + analysis.info())  #TODO revise how it's supposed to work
        else:
            selected_charts = analysis.charts

    ok = True

    if selected_charts:
        for chart in selected_charts:
            if args.e:
                chart_ok = analysis.export_image(chart, anf_dir, workspace, enforce=False) is not None
                ok = ok and chart_ok
            if args.d:
                chart_ok = analysis.export_data(chart, anf_dir, workspace, enforce=False) is not None
                ok = ok and chart_ok
            if not args.e and not args.d:
                chart_ok = run_chart_safe(analysis, chart, anf_dir, workspace, show=True)
                ok = ok and chart_ok
            plt.clf()

    if not ok:
        sys.exit(1)
