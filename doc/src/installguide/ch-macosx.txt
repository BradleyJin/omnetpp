== macOS

=== Supported Releases

This chapter provides additional information for installing @OMNETPP@ on
macOS.

The following releases are covered:

* macOS 10.15 and 11.1

=== Installing the Prerequisite Packages

 * Install the command line developer tools for macOS (compiler, debugger, etc.)

   $ xcode-select --install

Installing additional packages will enable more functionality in @OMNETPP@; see
the 'Additional packages' section at the end of this chapter.

=== Additional Steps Required on macOS to Use the Debugger.

The Command Line Developer Tools package contains the `lldb` debugger.
@OMNETPP@ 6.0 and later contains the necessary driver binary (`lldbmi2`)
that allows `lldb` to be used in the @OMNETPP@ IDE. If you are upgrading
from an earlier version of @OMNETPP@, be sure to delete and recreate
all Launch Configurations in the IDE. This is required because older
Launch Configurations were using `gdb` as the debugger, but the new
IDE uses `lldbmi2` as the debugger executable.

On the first debug session the OS may prompt you to allow debugging
with the `lldb` executable.

=== Downloading and Unpacking @OMNETPP@

Download @OMNETPP@ from {DOWNLOADSITE}. Make sure you select to download
the macOS specific archive, `@omnetpp@-@version@-src-macosx.tgz`.

Copy the archive to the directory where you want to install it. This is usually
your home directory, `/Users/<you>`. Open a terminal, and extract the archive
using the following command:

    $ tar zxvf @omnetpp@-@version@-src-macosx.tgz

A subdirectory called `@omnetpp@-@version@` will be created, containing the simulator
files.

Alternatively, you can also unpack the archive using Finder.

[NOTE]
===============================================================
The Terminal can be found in the Applications / Utilities
folder.
// do NOT make this a single line, or asciidoc goes berzerk!
===============================================================

[NOTE]
===============================================================
On machines using the Apple M1 chip you may receive error messages
during the configuration phase. To avoid this, the Rosetta emulator must be
installed and enabled for the Terminal app.

Open Finder and navigate to the Applications / Utilities folder.
Right click on the Terminal application and click Get Info.
Select 'Open using Rosetta' on the dialog and allow the system
to download and install Rosetta. Close all Terminal windows and
restart them. This will allow you to run Intel x64 based programs
in the terminal window.
===============================================================

=== Environment Variables

@OMNETPP@ needs its `bin/` and `tools/macosx/bin` directories to be in the path.
To add them to `PATH` temporarily (in the current shell only), change into the @OMNETPP@
directory and source the `setenv` script:

  $ cd @omnetpp@-@version@
  $ source setenv

To set the environment variables permanently, edit `.bashrc` in your home
directory. Use your favourite text editor to edit `.bashrc`, for example TextEdit:

  $ touch ~/.bashrc
  $ open -e ~/.bashrc

[NOTE]
===============================================================
`touch` is needed because `open -e` only opens existing files. Alternatively,
you can use the terminal-based 'pico' editor (`pico ~/.bashrc`)
===============================================================

Add the following line at the end of the file, then save it:

  export PATH=$HOME/@omnetpp@-@version@/bin:$HOME/@omnetpp@-@version@/tools/macosx/bin:$PATH
  export QT_PLUGIN_PATH=$HOME/@omnetpp@-@version@/tools/macosx/plugins

You need to close and re-open the terminal for the changes to take effect.

Alternatively, you can put the above line into `~/.bash_profile`, but then
you need to log out and log in again for the changes to take effect.

[NOTE]
===============================================================
If you use a shell other than 'bash' (new installations of macOS may use
the 'zsh' shell by default), consult the man page of that shell
to find out which startup file to edit, and how to set and
export variables. e.g.: for 'zsh' use `~/.zshrc` and `~/.zsh_profile`.
===============================================================


=== Configuring and Building @OMNETPP@

Check `configure.user` to make sure it contains the settings you need.
In most cases you don't need to change anything in it.


In the top-level @OMNETPP@ directory, type:

  $ ./configure

The `configure` script detects installed software and configuration of your
system. It writes the results into the `Makefile.inc` file, which will be
read by the makefiles during the build process.

[NOTE]
===============================================================
If there is an error during `configure`, the output may give hints about what
went wrong. Scroll up to see the messages. (You may need to increase
the scrollback buffer size of the terminal and re-run `./configure`.) The script
also writes a very detailed log of its operation into `config.log` to help track
down errors. Since `config.log` is very long, it is recommended that you open
it in an editor and search for phrases like 'error' or the name of the package
associated with the problem.
===============================================================

When `./configure` has finished, you can compile @OMNETPP@.
Type in the terminal:

  $ make

[TIP]
===============================================================
To take advantage of multiple processor cores, add the `-j4` option to the
`make` command line.
===============================================================

[NOTE]
===============================================================
Depending on your computer's security configuration, Gatekeeper
may complain about unsigned executables and kill the command-line
utilities that are used to build the simulator. 
In this case, you should manually enable every command Gatekeepr complains
about by opening 'System Preferences / Security and Privacy'
and clicking on the 'Allow' button near the bottom of the dialog.
You may have to repeat the above procedure several times before
all command-line utilities are enabled. Alternatively you can 
disable this security check globally (not recommended) by entering 
`sudo spctl --master-disable` on the terminal and then restarting 
the terminal application.
===============================================================

[NOTE]
===============================================================
The build process will not write anything outside its directory,
so no special privileges are needed.
===============================================================

[TIP]
===============================================================
The make command will seemingly compile everything twice. This is because
both debug and optimized versions of the libraries are built.
If you only want to build one set of the libraries, specify
`MODE=debug` or `MODE=release`:

  $ make MODE=release
===============================================================


=== Verifying the Installation

You can now verify that the sample simulations run correctly. For example,
the dyna simulation is started by entering the following commands:

    $ cd samples/aloha
    $ ./aloha

By default, the samples will run using the Qtenv environment. You should see
nice gui windows and dialogs.


=== Starting the IDE

@OMNETPP@ comes with an Eclipse-based simulation IDE.

Start the IDE by typing:

    $ @omnetpp@

If you would like to be able to launch the IDE via Applications,
the Dock or a desktop shortcut, do the following: open the `@omnetpp@-@version@`
folder in Finder, go into the `ide` subfolder, create an alias for the @omnetpp@
program there (right-click, 'Make Alias'), and drag the new alias into the
Applications folder, onto the Dock, or onto the desktop.

Alternatively, run one or both of the commands below:

  $ make install-menu-item
  $ make install-desktop-icon

which will do roughly the same.


=== Using the IDE

When you try to build a project in the IDE, you may get the following warning message:

[quote]
_____________________________________________________________________
Toolchain "..." is not supported on this platform or installation. Please go to the
Project menu, and activate a different build configuration. (You may need to switch
to the C/C++ perspective first, so that the required menu items appear in the Project menu.)
_____________________________________________________________________

If you encounter this message, choose 'Project > Properties > C/C++ Build >
Tool Chain Editor > Current toolchain > GCC for @OMNETPP@'.

The IDE is documented in detail in the 'User Guide'.

=== Reconfiguring the Libraries

If you need to recompile the @OMNETPP@ components with different flags (e.g.
different optimization), then change the top-level @OMNETPP@ directory, edit
`configure.user` accordingly, then type:

    $ ./configure
    $ make clean
    $ make

TIP: To take advantage of multiple processor cores, add the `-j4` option to the
`make` command line.

If you want to recompile just a single library, then change to the directory
of the library (e.g. `cd src/sim`) and type:

    $ make clean
    $ make

By default, libraries are compiled in both debug and release mode. If you want
to make release or debug builds only, use:

    $ make MODE=release

or

    $ make MODE=debug

By default, shared libraries will be created. If you want to build static
libraries, set `SHARED_LIBS=no` in `configure.user` and re-configure your
project.

[NOTE]
===============================================================
The built libraries and programs are immediately copied
to the `lib/` and `bin/` subdirectories.
===============================================================

=== Additional Packages

==== OpenMPI

MacOS does not come with OpenMPI, so you must install it manually.
You can install it from the Homebrew repo (http://brew.sh) by typing
`brew install open-mpi`. In this case, you have to manually set
the MPI_CFLAGS and MPI_LIBS variables in `configure.user` and re-run
`./configure`.

==== Akaroa

Akaroa 2.7.9, which is the latest version at the time of writing, does not
support macOS. You may try to port it using the porting guide from the
Akaroa distribution.

ifdef::OMNEST[]

==== SystemC

SystemC integration is not available on macOS because the bundled
SystemC reference implementation does not currently support macOS.

endif::OMNEST[]
