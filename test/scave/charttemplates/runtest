#!/usr/bin/env python3

import os
import sys

from omnetpp.scave.analysis import *

def get_opp_root():
    try:
        out = subprocess.check_output("opp_configfilepath")
    except:
        print("ERROR: Could not determine OMNeT++ directory (try \". setenv\" in this shell).", file=sys.stderr)
        sys.exit(1)
    return os.path.abspath(os.path.dirname(out.decode('utf-8')))

OPP_ROOT = get_opp_root() + "/"
TEMPLATE_DIR = OPP_ROOT + "ui/org.omnetpp.scave.templates/charttemplates/"


def test_script(scriptname, base_props, tests):
    with open(TEMPLATE_DIR + "/" + scriptname, "rt") as f:
        origscript = str(f.read())

    charts = []

    i = 0
    for propname, propvalue, exc in tests:
        name = scriptname.replace(".py", "_" + str(i))
        i = i + 1
        props = base_props.copy()
        props.update({propname: propvalue})

        if exc:
            origlines = origscript.splitlines()
            qexc = repr(exc)
            sl = []
            sl.append("import test_exceptions")
            sl.append("test_exceptions.messages.clear()")
            sl.append("try:")
            sl += ["   " + l for l in origlines]
            sl.append("except BaseException as e:")
            sl.append("    test_exceptions.handle_exception(" + qexc + ", e)")
            script = "\n".join(sl)
        else:
            script = origscript

        chart = Chart(type="MATPLOTLIB", name=name, script=script, properties=props)
        charts.append(chart)

    return charts


if __name__ == "__main__":


    charts = []

    charts += test_script("barchart.py",
        {
            "filter": "name =~ channelUtilization:last",
            "groups": "iaMean",
            "series": "numHosts"
        },
        [
            ("filter", "type =~ scalar", None),
            ("filter", "name =~ channel*", None),
            ("filter", "aa bb", "Syntax error"),
            ("filter", "", "Error while querying results: Empty filter expression"),

            ("groups", "iaMean", None),
            ("groups", "numHosts", "not 1-dimensional"),
            ("groups", "experiment", None),
            ("groups", "name", None),
            ("groups", "aa bb", "No such iteration variable"),
            ("groups", "", "set both the Groups and Series properties"),

            ("series", "iaMean", "not 1-dimensional"),
            ("series", "numHosts", None),
            ("series", "experiment", None),
            ("series", "name", None),
            ("series", "", "set both the Groups and Series properties"),
        ]
    )

    charts += test_script("linechart.py",
        {
            "filter": "name =~ radioState:vector",
            "vector_start_time": "",
            "vector_end_time": "",
            "vector_operations": ""
        },
        [
            ("filter", "type =~ vector", None),
            ("filter", "name =~ *State:vector", None),
            ("filter", "aa bb", "Syntax error"),
            ("filter", "", "Error while querying results: Empty filter expression"),

            ("vector_start_time", "10", None),
            ("vector_end_time", "20", None),

            ("vector_operations", "apply:mean", None),
            ("vector_operations", "compute:sum", None),

            ("vector_operations", "apply:sum\ncompute:divtime\napply:timewinavg(window_size=200) # comment", None)
        ]
    )

    charts += test_script("scatterchart_itervars.py",
        {
            "filter": "name =~ channelUtilization:last",
            "xaxis_itervar": "iaMean",
            "iso_itervar": "numHosts"
        },
        [
            ("filter", "type =~ scalar", None),
            ("filter", "name =~ channel*", None),
            ("filter", "aa bb", "Syntax error"),
            ("filter", "", "Error while querying results: Empty filter expression"),

            ("xaxis_itervar", "iaMean", None),
            ("xaxis_itervar", "numHosts", "not 1-dimensional"),
            ("xaxis_itervar", "experiment", None),
            ("xaxis_itervar", "name", None),
            ("xaxis_itervar", "aa bb", "iteration variable for the X axis could not be found"),
            ("xaxis_itervar", "", "select the iteration variable for the X axis"),

            ("iso_itervar", "iaMean", "not 1-dimensional"),
            ("iso_itervar", "numHosts", None),
            ("iso_itervar", "numHosts, replication", None),
            ("iso_itervar", "experiment", None),
            ("iso_itervar", "name", None),
            ("iso_itervar", "aa bb", "iteration variable for the iso lines could not be found"),
            ("iso_itervar", "", None),
        ]
    )

    charts += test_script("histogramchart.py",
        {
            "filter": "name =~ channelUtilization:last",
        },
        [
            ("filter", "type =~ histogram", None),
            ("filter", "nonexistent", "returned no data"),
            ("filter", "aa bb", "Syntax error"),
            ("filter", "", "Error while querying results: Empty filter expression"),
        ]
    )

    charts += test_script("generic_mpl.py",
        {
            "input": "Hello",
        },
        [
            ("input", "", None),
            ("input", "FooBar", None),
        ]
    )

    charts += test_script("generic_xyplot.py",
        {
        },
        [
            ("dummy", "", None),
        ]
    )

    charts += test_script("3dchart_itervars.py",
        {
            "filter": "name =~ channelUtilization:last",
            "xaxis_itervar": "iaMean",
            "yaxis_itervar": "numHosts",
            "colormap": "viridis",
            "colormap_reverse": "false",
            "chart_type": "bar"
        },
        [
            ("filter", "type =~ scalar", "scalars must share the same name"),
            ("filter", "name =~ channel*", None),
            ("filter", "aa bb", "Syntax error"),
            ("filter", "", "Error while querying results: Empty filter expression"),

            ("xaxis_itervar", "iaMean", None),
            ("xaxis_itervar", "numHosts", "not 1-dimensional"),
            ("xaxis_itervar", "aa bb", "iteration variable for the X axis could not be found"),
            ("xaxis_itervar", "", "set both the X Axis and Y Axis options"),

            ("yaxis_itervar", "iaMean", "not 1-dimensional"),
            ("yaxis_itervar", "numHosts", None),
            ("yaxis_itervar", "aa bb", "iteration variable for the Y axis could not be found"),
            ("yaxis_itervar", "", "set both the X Axis and Y Axis options"),

            ("chart_type", "points", None),
            ("chart_type", "surface", None),
            ("chart_type", "trisurf", None),
        ]
    )

    charts += test_script("boxwhiskers.py",
        {
            "filter": "*:histogram"
        },
        [
            ("filter", "type =~ histogram", None),
            ("filter", "aa bb", "Syntax error"),
            ("filter", "", "Error while querying results: Empty filter expression"),
        ]
    )

    inputs = [ "/aloha/*.sca", "/aloha/*.vec" ]
    analysis = Analysis(inputs, charts=charts)

    analysis.to_anf_file("all_the_tests.anf")
